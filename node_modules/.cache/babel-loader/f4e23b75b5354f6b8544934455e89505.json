{"ast":null,"code":"var _jsxFileName = \"D:\\\\HocTap\\\\unknow\\\\tailwind-starter-kit-main\\\\Profile Page\\\\react-profile-page\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport firebase from \"firebase\";\nimport React from \"react\";\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\nimport Editor from \"views/Editor\";\nimport Login from \"views/Login\";\nimport Profile from \"views/Profile.js\";\nimport \"./style.css\"; // Configure Firebase.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  apiKey: \"AIzaSyA8kfDkbh_Tefdk4HZlnH8gsJ9MbAVjQl8\",\n  authDomain: \"code-war-878f1.firebaseapp.com\" // ...\n\n}; // Configure FirebaseUI.\n\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: \"/profile\",\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID]\n};\nfirebase.initializeApp(config);\n\nfunction App(props) {\n  _s();\n\n  const [isSignedIn, setIsSignedIn] = React.useState(false); // Local signed-in state.\n  // Listen to the Firebase Auth state and set the local state.\n\n  React.useEffect(() => {\n    const unregisterAuthObserver = firebase.auth().onAuthStateChanged(user => {\n      console.log(user);\n      setIsSignedIn(!!user);\n    });\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\n  }, []);\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/profile\",\n        component: Profile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/edit\",\n        component: Editor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        component: Login\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n        from: \"/\",\n        to: \"/profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ES28sB8qKBhxH4u/sxzLxEgNPXw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/HocTap/unknow/tailwind-starter-kit-main/Profile Page/react-profile-page/src/App.js"],"names":["firebase","React","BrowserRouter","Redirect","Route","Switch","Editor","Login","Profile","config","apiKey","authDomain","uiConfig","signInFlow","signInSuccessUrl","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","initializeApp","App","props","isSignedIn","setIsSignedIn","useState","useEffect","unregisterAuthObserver","onAuthStateChanged","user","console","log"],"mappings":";;;AAAA,OAAO,+CAAP;AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,QAAxB,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAO,aAAP,C,CAEA;;;AACA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,gCAFC,CAGb;;AAHa,CAAf,C,CAKA;;AACA,MAAMC,QAAQ,GAAG;AACf;AACAC,EAAAA,UAAU,EAAE,OAFG;AAGf;AACAC,EAAAA,gBAAgB,EAAE,UAJH;AAKf;AACAC,EAAAA,aAAa,EAAE,CAACf,QAAQ,CAACgB,IAAT,CAAcC,kBAAd,CAAiCC,WAAlC;AANA,CAAjB;AAQAlB,QAAQ,CAACmB,aAAT,CAAuBV,MAAvB;;AAEA,SAASW,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BtB,KAAK,CAACuB,QAAN,CAAe,KAAf,CAApC,CADkB,CACyC;AAE3D;;AACAvB,EAAAA,KAAK,CAACwB,SAAN,CAAgB,MAAM;AACpB,UAAMC,sBAAsB,GAAG1B,QAAQ,CACpCgB,IAD4B,GAE5BW,kBAF4B,CAERC,IAAD,IAAU;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACAL,MAAAA,aAAa,CAAC,CAAC,CAACK,IAAH,CAAb;AACD,KAL4B,CAA/B;AAMA,WAAO,MAAMF,sBAAsB,EAAnC,CAPoB,CAOmB;AACxC,GARD,EAQG,EARH;AASA,sBACE,QAAC,aAAD;AAAA,2BACE,QAAC,MAAD;AAAA,8BACE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,UAAZ;AAAuB,QAAA,SAAS,EAAElB;AAAlC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAEF;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,SAAS,EAAEC;AAAhC;AAAA;AAAA;AAAA;AAAA,cAHF,eAKE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAC,GAAf;AAAmB,QAAA,EAAE,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAxBQa,G;;KAAAA,G;AA0BT,eAAeA,GAAf","sourcesContent":["import \"@fortawesome/fontawesome-free/css/all.min.css\";\r\nimport firebase from \"firebase\";\r\nimport React from \"react\";\r\nimport { BrowserRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Editor from \"views/Editor\";\r\nimport Login from \"views/Login\";\r\nimport Profile from \"views/Profile.js\";\r\nimport \"./style.css\";\r\n\r\n// Configure Firebase.\r\nconst config = {\r\n  apiKey: \"AIzaSyA8kfDkbh_Tefdk4HZlnH8gsJ9MbAVjQl8\",\r\n  authDomain: \"code-war-878f1.firebaseapp.com\",\r\n  // ...\r\n};\r\n// Configure FirebaseUI.\r\nconst uiConfig = {\r\n  // Popup signin flow rather than redirect flow.\r\n  signInFlow: \"popup\",\r\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\r\n  signInSuccessUrl: \"/profile\",\r\n  // We will display Google and Facebook as auth providers.\r\n  signInOptions: [firebase.auth.GoogleAuthProvider.PROVIDER_ID],\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nfunction App(props) {\r\n  const [isSignedIn, setIsSignedIn] = React.useState(false); // Local signed-in state.\r\n\r\n  // Listen to the Firebase Auth state and set the local state.\r\n  React.useEffect(() => {\r\n    const unregisterAuthObserver = firebase\r\n      .auth()\r\n      .onAuthStateChanged((user) => {\r\n        console.log(user);\r\n        setIsSignedIn(!!user);\r\n      });\r\n    return () => unregisterAuthObserver(); // Make sure we un-register Firebase observers when the component unmounts.\r\n  }, []);\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/profile\" component={Profile} />\r\n        <Route path=\"/edit\" component={Editor} />\r\n        <Route path=\"/login\" component={Login} />\r\n\r\n        <Redirect from=\"/\" to=\"/profile\" />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}