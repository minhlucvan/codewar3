{"ast":null,"code":"var _jsxFileName = \"D:\\\\HocTap\\\\unknow\\\\tailwind-starter-kit-main\\\\Profile Page\\\\react-profile-page\\\\src\\\\components\\\\FormEdit\\\\components\\\\ImagePicker.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst thumbsContainer = {\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  marginTop: 16\n};\nconst thumb = {\n  display: \"inline-flex\",\n  borderRadius: 2,\n  border: \"1px solid #eaeaea\",\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: \"border-box\"\n};\nconst thumbInner = {\n  display: \"flex\",\n  minWidth: 0,\n  overflow: \"hidden\"\n};\nconst img = {\n  display: \"block\",\n  width: \"auto\",\n  height: \"100%\"\n};\n\nfunction ImagePicker({\n  title\n}) {\n  _s();\n\n  const [files, setFiles] = React.useState([]);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    accept: \"image/*\",\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n    }\n  });\n  const thumbs = files.map(file => /*#__PURE__*/_jsxDEV(\"div\", {\n    style: thumb,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: thumbInner,\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: file.preview,\n        style: img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, file.name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this));\n  React.useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", { ...getRootProps({\n        className: \"dropzone\"\n      }),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", { ...getInputProps()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Avatar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n      style: thumbsContainer,\n      children: thumbs\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ImagePicker, \"Ee7v0zhGi6g6i2mfjkXvTwu1SJQ=\", false, function () {\n  return [useDropzone];\n});\n\n_c = ImagePicker;\nexport default ImagePicker;\n\nvar _c;\n\n$RefreshReg$(_c, \"ImagePicker\");","map":{"version":3,"sources":["D:/HocTap/unknow/tailwind-starter-kit-main/Profile Page/react-profile-page/src/components/FormEdit/components/ImagePicker.js"],"names":["React","useDropzone","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","ImagePicker","title","files","setFiles","useState","getRootProps","getInputProps","accept","onDrop","acceptedFiles","map","file","Object","assign","preview","URL","createObjectURL","thumbs","name","useEffect","forEach","revokeObjectURL","className"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,gBAA5B;;AACA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,OAAO,EAAE,MADa;AAEtBC,EAAAA,aAAa,EAAE,KAFO;AAGtBC,EAAAA,QAAQ,EAAE,MAHY;AAItBC,EAAAA,SAAS,EAAE;AAJW,CAAxB;AAOA,MAAMC,KAAK,GAAG;AACZJ,EAAAA,OAAO,EAAE,aADG;AAEZK,EAAAA,YAAY,EAAE,CAFF;AAGZC,EAAAA,MAAM,EAAE,mBAHI;AAIZC,EAAAA,YAAY,EAAE,CAJF;AAKZC,EAAAA,WAAW,EAAE,CALD;AAMZC,EAAAA,KAAK,EAAE,GANK;AAOZC,EAAAA,MAAM,EAAE,GAPI;AAQZC,EAAAA,OAAO,EAAE,CARG;AASZC,EAAAA,SAAS,EAAE;AATC,CAAd;AAYA,MAAMC,UAAU,GAAG;AACjBb,EAAAA,OAAO,EAAE,MADQ;AAEjBc,EAAAA,QAAQ,EAAE,CAFO;AAGjBC,EAAAA,QAAQ,EAAE;AAHO,CAAnB;AAMA,MAAMC,GAAG,GAAG;AACVhB,EAAAA,OAAO,EAAE,OADC;AAEVS,EAAAA,KAAK,EAAE,MAFG;AAGVC,EAAAA,MAAM,EAAE;AAHE,CAAZ;;AAMA,SAASO,WAAT,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAA8B;AAAA;;AAC5B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,KAAK,CAACwB,QAAN,CAAe,EAAf,CAA1B;AACA,QAAM;AAAEC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAkCzB,WAAW,CAAC;AAClD0B,IAAAA,MAAM,EAAE,SAD0C;AAElDC,IAAAA,MAAM,EAAGC,aAAD,IAAmB;AACzBN,MAAAA,QAAQ,CACNM,aAAa,CAACC,GAAd,CAAmBC,IAAD,IAChBC,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoB;AAClBG,QAAAA,OAAO,EAAEC,GAAG,CAACC,eAAJ,CAAoBL,IAApB;AADS,OAApB,CADF,CADM,CAAR;AAOD;AAViD,GAAD,CAAnD;AAaA,QAAMM,MAAM,GAAGf,KAAK,CAACQ,GAAN,CAAWC,IAAD,iBACvB;AAAK,IAAA,KAAK,EAAExB,KAAZ;AAAA,2BACE;AAAK,MAAA,KAAK,EAAES,UAAZ;AAAA,6BACE;AAAK,QAAA,GAAG,EAAEe,IAAI,CAACG,OAAf;AAAwB,QAAA,KAAK,EAAEf;AAA/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF,KAAwBY,IAAI,CAACO,IAA7B;AAAA;AAAA;AAAA;AAAA,UADa,CAAf;AAQAtC,EAAAA,KAAK,CAACuC,SAAN,CACE,MAAM,MAAM;AACV;AACAjB,IAAAA,KAAK,CAACkB,OAAN,CAAeT,IAAD,IAAUI,GAAG,CAACM,eAAJ,CAAoBV,IAAI,CAACG,OAAzB,CAAxB;AACD,GAJH,EAKE,CAACZ,KAAD,CALF;AAQA,sBACE;AAAS,IAAA,SAAS,EAAC,WAAnB;AAAA,4BACE,oBAASG,YAAY,CAAC;AAAEiB,QAAAA,SAAS,EAAE;AAAb,OAAD,CAArB;AAAA,8BACE,sBAAWhB,aAAa;AAAxB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE;AAAO,MAAA,KAAK,EAAExB,eAAd;AAAA,gBAAgCmC;AAAhC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GAxCQjB,W;UAEiCnB,W;;;KAFjCmB,W;AA0CT,eAAeA,WAAf","sourcesContent":["import React from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nconst thumbsContainer = {\r\n  display: \"flex\",\r\n  flexDirection: \"row\",\r\n  flexWrap: \"wrap\",\r\n  marginTop: 16,\r\n};\r\n\r\nconst thumb = {\r\n  display: \"inline-flex\",\r\n  borderRadius: 2,\r\n  border: \"1px solid #eaeaea\",\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 100,\r\n  height: 100,\r\n  padding: 4,\r\n  boxSizing: \"border-box\",\r\n};\r\n\r\nconst thumbInner = {\r\n  display: \"flex\",\r\n  minWidth: 0,\r\n  overflow: \"hidden\",\r\n};\r\n\r\nconst img = {\r\n  display: \"block\",\r\n  width: \"auto\",\r\n  height: \"100%\",\r\n};\r\n\r\nfunction ImagePicker({title}) {\r\n  const [files, setFiles] = React.useState([]);\r\n  const { getRootProps, getInputProps } = useDropzone({\r\n    accept: \"image/*\",\r\n    onDrop: (acceptedFiles) => {\r\n      setFiles(\r\n        acceptedFiles.map((file) =>\r\n          Object.assign(file, {\r\n            preview: URL.createObjectURL(file),\r\n          })\r\n        )\r\n      );\r\n    },\r\n  });\r\n\r\n  const thumbs = files.map((file) => (\r\n    <div style={thumb} key={file.name}>\r\n      <div style={thumbInner}>\r\n        <img src={file.preview} style={img} />\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  React.useEffect(\r\n    () => () => {\r\n      // Make sure to revoke the data uris to avoid memory leaks\r\n      files.forEach((file) => URL.revokeObjectURL(file.preview));\r\n    },\r\n    [files]\r\n  );\r\n\r\n  return (\r\n    <section className=\"container\">\r\n      <div {...getRootProps({ className: \"dropzone\" })}>\r\n        <input {...getInputProps()} />\r\n        <p>Avatar</p>\r\n      </div>\r\n      <aside style={thumbsContainer}>{thumbs}</aside>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ImagePicker;\r\n"]},"metadata":{},"sourceType":"module"}